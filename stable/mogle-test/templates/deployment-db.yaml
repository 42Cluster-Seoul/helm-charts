{{- if .Values.db }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-db-svc"
  namespace: "{{ .Release.Namespace }}"
spec:
  ports:
  - port: {{ .Values.db.port }}
    protocol: TCP
    targetPort: {{ .Values.db.port }}
  selector:
    app: "{{ .Chart.Name }}-{{ .Values.db.type }}"
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-{{ .Values.db.type }}"
  namespace: "{{ .Release.Namespace }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}-{{ .Values.db.type }}"
  template:
    metadata:
      labels:
        app: "{{ .Chart.Name }}-{{ .Values.db.type }}"
    spec:
      nodeSelector:
       topology.ebs.csi.aws.com/zone: "{{ .Values.ebs.az }}"
       alpha.eksctl.io/nodegroup-name: "{{ .Values.ebs.nodeGroupName}}"
      containers:
      - name: "{{ .Values.db.type }}"
        image: "{{ .Values.db.image }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: {{ .Values.db.port }}
        env:
          {{- range $key, $value := .Values.db.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          {{- $dbType := .Values.db.type }}
          {{- range $key, $value := .Values.db.secret }}
          - name: "{{ $key }}"
            valueFrom:
              secretKeyRef:
                name: "{{ $dbType }}-secret"
                key: "{{ $key }}"
          {{- end }}
        volumeMounts:
        - mountPath: "/var/lib/{{ .Values.db.type }}/data/"
          name: "{{ .Values.db.type }}-db-pvc"
        {{- with .Values.db.volumeMounts }}
          {{ toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      {{- with .Values.db.volumes }}
        {{ toYaml . | nindent 6 }}
      {{- end }}
      - name: "{{ .Values.db.type }}-db-pvc"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-db-pvc"
{{- end }}